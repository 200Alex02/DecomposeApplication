// Generated by Dagger (https://dagger.dev).
package com.example.decompose.data.use_case;

import android.app.Application;
import com.example.decompose.domain.repository.CoinRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GetCoinsUseCaseImpl_Factory implements Factory<GetCoinsUseCaseImpl> {
  private final Provider<CoinRepository> repositoryProvider;

  private final Provider<Application> applicationProvider;

  public GetCoinsUseCaseImpl_Factory(Provider<CoinRepository> repositoryProvider,
      Provider<Application> applicationProvider) {
    this.repositoryProvider = repositoryProvider;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public GetCoinsUseCaseImpl get() {
    return newInstance(repositoryProvider.get(), applicationProvider.get());
  }

  public static GetCoinsUseCaseImpl_Factory create(Provider<CoinRepository> repositoryProvider,
      Provider<Application> applicationProvider) {
    return new GetCoinsUseCaseImpl_Factory(repositoryProvider, applicationProvider);
  }

  public static GetCoinsUseCaseImpl newInstance(CoinRepository repository,
      Application application) {
    return new GetCoinsUseCaseImpl(repository, application);
  }
}
