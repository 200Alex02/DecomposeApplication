// Generated by Dagger (https://dagger.dev).
package com.example.decompose.data.di;

import com.example.decompose.data.remote.api.ApiService;
import com.example.decompose.data.repository.CoinRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataModule_ProvideCoinRepositoryFactory implements Factory<CoinRepositoryImpl> {
  private final Provider<ApiService> apiProvider;

  public DataModule_ProvideCoinRepositoryFactory(Provider<ApiService> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public CoinRepositoryImpl get() {
    return provideCoinRepository(apiProvider.get());
  }

  public static DataModule_ProvideCoinRepositoryFactory create(Provider<ApiService> apiProvider) {
    return new DataModule_ProvideCoinRepositoryFactory(apiProvider);
  }

  public static CoinRepositoryImpl provideCoinRepository(ApiService api) {
    return Preconditions.checkNotNullFromProvides(DataModule.INSTANCE.provideCoinRepository(api));
  }
}
